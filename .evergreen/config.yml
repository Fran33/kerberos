# Run previous commits to pinpoint a failure's origin.
stepback: true

# Mark failures other than test failures with a purple box.
command_type: system

# Limit maximum test running time.
exec_timeout_secs: 900   # 15 minutes

# What to do when evergreen hits the timeout
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  fetch source:
    - command: git.get_project
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          # Get the current unique version of this checkout
          if [ "${is_patch}" = "true" ]; then
             CURRENT_VERSION=$(git describe)-patch-${version_id}
          else
             CURRENT_VERSION=latest
          fi
          export DRIVERS_TOOLS="$(pwd)/../drivers-tools"
          export PROJECT_DIRECTORY="$(pwd)"
          # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
          if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
             export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
             export PROJECT_DIRECTORY=$(cygpath -m $PROJECT_DIRECTORY)
          fi
          export UPLOAD_BUCKET="${project}"
          cat <<EOT > expansion.yml
          CURRENT_VERSION: "$CURRENT_VERSION"
          DRIVERS_TOOLS: "$DRIVERS_TOOLS"
          UPLOAD_BUCKET: "$UPLOAD_BUCKET"
          PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
          PREPARE_SHELL: |
             set -o errexit
             set -o xtrace
             export DRIVERS_TOOLS="$DRIVERS_TOOLS"
             export UPLOAD_BUCKET="$UPLOAD_BUCKET"
             export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"
             export PROJECT="${project}"
          EOT
          # See what we've done
          cat expansion.yml
    - command: expansions.update
      params:
        file: src/expansion.yml
  run prebuild:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: >
          ${PREPARE_SHELL}
          NODE_GITHUB_TOKEN=${github_token} ${PROJECT_DIRECTORY}/.evergreen/run-prebuild.sh
  run prebuild and force publish:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: >
          ${PREPARE_SHELL}
          NODE_FORCE_PUBLISH=1 NODE_GITHUB_TOKEN=${github_token} ${PROJECT_DIRECTORY}/.evergreen/run-prebuild.sh
  install dependencies:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          NODE_VERSION=${node_version} bash ${PROJECT_DIRECTORY}/.evergreen/install-dependencies.sh

pre:
  - func: fetch source

tasks:
  - name: run-prebuild
    commands:
      - func: install dependencies
      - func: run prebuild
  - name: run-prebuild-force-publish
    commands:
      - func: install dependencies
      - func: run prebuild and force publish

buildvariants:
  - name: ubuntu1604
    display_name: "Ubuntu 16.04 64-bit"
    run_on: ubuntu1604-test
    expansions:
      has_packages: true
      packager_distro: ubuntu1604
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: macos
    display_name: "macOS 10.14"
    run_on: macos-1014
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: windows-test
    display_name: "Windows 2016"
    run_on: windows-64-vs2017-test
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: linux-64-amazon-ami
    display_name: "Amazon Linux"
    run_on: amazon1-2018-test
    expansions:
      has_packages: true
      packager_distro: amazon
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: amazon2
    display_name: "Amazon Linux 2"
    run_on: amazon2-test
    expansions:
      has_packages: true
      packager_distro: amazon2
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: debian10
    display_name: "Debian 10.0"
    run_on: debian10-test
    expansions:
      has_packages: true
      packager_distro: debian10
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: debian92
    display_name: "Debian 9.2"
    run_on: debian92-test
    expansions:
      has_packages: true
      packager_distro: debian92
      packager_arch: x86_64
    tasks:
    - run-prebuild      
  - name: suse12-64
    display_name: "SLES 12 64-bit"
    run_on: suse12-test
    expansions:
      has_packages: true
      packager_distro: suse12
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: ubuntu1604-arm64
    display_name: "Ubuntu 16.04 arm64"
    run_on: ubuntu1604-arm64-large
    expansions:
      has_packages: true
      packager_distro: ubuntu1604
      packager_arch: arm64
    tasks:
      run-prebuild
  - name: rhel-70-64-bit
    display_name: "RHEL 7.0 64-bit"
    run_on: rhel70-small
    expansions:
      has_packages: true
      packager_distro: rhel70
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: rhel-80-64-bit
    display_name: "RHEL 8.0 64-bit"
    run_on: rhel80-test
    expansions:
      has_packages: true
      packager_distro: rhel80
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: suse15-64
    display_name: "SLES 15 64-bit"
    run_on: suse15-test
    expansions:
      has_packages: true
      packager_distro: suse15
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: suse12-s390x
    display_name: "SLES 12 s390x"
    run_on: suse12-zseries-test
    expansions:
      has_packages: true
      packager_distro: suse12
      packager_arch: s390x
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: ubuntu1804-64
    display_name: "Ubuntu 18.04 64-bit"
    run_on: ubuntu1804-test
    expansions:
      has_packages: true
      packager_distro: ubuntu1804
      packager_arch: x86_64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: ubuntu1804-arm64
    display_name: "Ubuntu 18.04 arm64"
    run_on: ubuntu1804-arm64-build
    expansions:
      has_packages: true
      packager_distro: ubuntu1804
      packager_arch: arm64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
